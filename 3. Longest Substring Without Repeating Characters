Code : 
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        charSet = set() 
        l = 0 
        res = 0 

        for r in range(len(s)):
            while s[r] in charSet:
                charSet.remove(s[l]) 
                l += 1 
            charSet.add(s[r]) 
            res = max(res, r - l + 1) 
        return res 

  Explaination : 
   Let's break down your code step-by-step — it's a classic sliding window solution for the problem:

"Find the length of the longest substring without repeating characters."

🔍 Problem Example:
Input: "abcabcbb"
Output: 3
Explanation: "abc" is the longest substring with all unique characters.

✅ Code:
python
Copy code
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        charSet = set()
        l = 0
        res = 0

        for r in range(len(s)):
            while s[r] in charSet:
                charSet.remove(s[l])
                l += 1
            charSet.add(s[r])
            res = max(res, r - l + 1)
        return res
🧠 Explanation:
charSet = set(): To store the unique characters in the current window.

l = 0: Left pointer of the sliding window.

res = 0: To store the maximum length found so far.

🧱 Loop: for r in range(len(s))
r is the right pointer of the window.

🔄 Inside the loop:
python
Copy code
while s[r] in charSet:
    charSet.remove(s[l])
    l += 1
If s[r] (current character) is already in the set, it means there's a repetition.

So, we shrink the window from the left by removing s[l] and moving l forward until s[r] is no longer in the set.

python
Copy code
charSet.add(s[r])
res = max(res, r - l + 1)
After ensuring there are no duplicates, we:

Add s[r] to the set.

Update res with the current window length (r - l + 1).

📦 Example Walkthrough:
Input: "abcabcbb"

r	s[r]	charSet	Action	l	res
0	a	{}	Add 'a'	0	1
1	b	{'a'}	Add 'b'	0	2
2	c	{'a','b'}	Add 'c'	0	3
3	a	{'a','b','c'}	Remove 'a', add 'a'	1	3
4	b	{'b','c','a'}	Remove 'b', add 'b'	2	3
5	c	{'c','a','b'}	Remove 'c', add 'c'	3	3
6	b	{'a','b','c'}	Remove 'a', 'b', add 'b'	4	3
7	b	{'c','b'}	Remove 'c', 'b', add 'b'	6	3
Final result: res = 3 → "abc" is the longest unique substring.

🏁 Return:
python
Copy code
return res
  
